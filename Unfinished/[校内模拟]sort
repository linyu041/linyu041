#include<bits/stdc++.h>
using namespace std;
#define U(i,j,k) for(int i=j;i<=k;++i)
#define D(i,j,k) for(int i=j;i>=k;--i)
const int N=(5e5)+501,Mod=1e9+7;
int n,m,q[N<<1];
struct Tree
{
	long long tr1[N<<1],tr2[N<<1];
	void Add(int x,int y)
	{
		long long k=(long long)(y*x)%Mod;
		for(;x<=n+n;x+=x&(-x))
		{
			tr1[x]=(tr1[x]+y)%Mod;
			tr2[x]=(tr2[x]+k)%Mod;
		}
	};
	long long Query(int x)
	{
		long long ans=0;
		for(int i=x;i>0;i-=i&(-i))
		{
			ans+=tr1[i]*(x+1)-tr2[i];
		}
		return ans;
	};
}a,b,c;
int Max(int l,int r)
{
	int mid=(l+r)>>1;
	long long ans=a.Query(r)-a.Query(mid-1)-(a.Query(mid)-a.Query(l-1));
	return ans;
}
int Min(int l,int r)
{
	return c.Query(r)-c.Query(l-1)-(b.Query(r)-b.Query(l-1)) ;
}
int Qpower(int x,int tims,long long sum=1)
{
	while(tims)
	{
		sum=(sum*x)%Mod;
		tims>>=1;
		x=x*x%Mod;
	}
	return sum;
}
long long fac[N<<1],rfac[N<<1];
long long Catalan(int x)
{
	return ((fac[x+x]*rfac[n]*rfac[n])%Mod)*Qpower(x+1,Mod-2)%Mod;
}
int main()
{
	freopen("sort.in","r",stdin);
	freopen("sort.out","w",stdout);
	
	scanf("%d%d",&n,&m);
	fac[0]=1;
	U(i,1,n+n)	fac[i]=fac[i-1]*i%Mod;
	rfac[n+n]=Qpower(fac[n+n],Mod-2);
	D(i,n+n-1,1)	rfac[i]=rfac[i+1]*(i+1)%Mod;
	U(i,1,n+n)
	{
		scanf("%d",&q[i]);
		a.Add(i,q[i]-q[i-1]);
		if(i&1)
		{
			b.Add(i,q[i]-q[i-1]);
		}
		else
		{
			c.Add(i,q[i]-q[i-1]); 
		}
	}
	int opt,x,y,z;
	U(i,1,m)
	{
		scanf("%d%d%d",&opt,&x,&y);
		if(opt==0)
		{
			scanf("%d",&z);
			a.Add(x,z);a.Add(y+1,-z);
			if(x&1)	b.Add(x,z),c.Add(x+1,z);
			else	b.Add(x+1,z),c.Add(x,z);
			if(y&1)	b.Add(y+2,-z),c.Add(y+1,-z);
			else	b.Add(y+1,-z),c.Add(y+2,-z); 
		}
		else
		{
			printf("%lld",Max(x,y));
			printf(" %lld ",Min(x,y));
			printf("%lld\n",Catalan((y-x+1)/2));
		}
	}
	return 0;
}
