#include<iostream>
#include<cstdio>
#include<map>
#include<string>
#include<queue>
#include<cstring>
using namespace std;
#define U(i,j,k) for(int i=j;i<=k;++i)
#define D(i,j,k) for(int i=j;i>=k;--i)
const int fac[11]={1,1,2,6,24,120,720,5040,40320,362880};
const int x[11]={0,1,1,1,2,2,2,3,3,3},y[11]={0,1,2,3,1,2,3,1,2,3};
int Abs(int x)
{
	return x<0?-x:x;
}
struct Data
{
	int c[10],f,xx,yy;
	string ans;
	int Hash(int sum=0)
	{
		U(i,1,9)
		{
			int k=0;
			U(j,i+1,9)
			{
				if(c[j]<c[i])	++k;
			}
			sum+=fac[9-i]*k;
		}
		return sum;
	};
	void Evaluate()
	{
		f=0;
		U(i,1,3)
		{
			U(j,1,3)
			{
				f+=Abs(x[c[(i-1)*3+j]]-i)+Abs(y[c[(i-1)*3+j]]-j);
			}
		}
	}
}s;
struct cmp
{
	bool operator () (Data &tmp1,Data &tmp2) const
	{
		return tmp1.f>tmp2.f;
	};
};
priority_queue<Data,vector<Data>,cmp> q;
map<int,int> m;
void Astar(Data x)
{
	q.push(x);
	Data t,r;
	while(!q.empty())
	{
		t=q.top();
		q.pop();
		if(t.Hash()==0)
		{
			/*U(i,1,9)	cout<<t.c[i]<<" ";
			cout<<endl;//*/
			cout<<t.ans<<endl;
			exit(0);
		}
		if(t.xx-1>=1)//up
		{
			r=t;
			r.ans+='u';
			swap(r.c[(r.xx-1)*3+r.yy],r.c[(r.xx-2)*3+r.yy]);
			--r.xx;
			r.Evaluate();
			if(m[r.Hash()]==0)	q.push(r),m[r.Hash()]=1; 
		}
		if(t.yy-1>=1)//left
		{
			r=t;
			r.ans+='l';
			swap(r.c[(r.xx-1)*3+r.yy],r.c[(r.xx-1)*3+r.yy-1]);
			--r.yy;
			r.Evaluate();
			if(m[r.Hash()]==0)	q.push(r),m[r.Hash()]=1; 
		}
		if(t.xx+1<=3)//down
		{
			r=t;
			r.ans+='d';
			swap(r.c[(r.xx-1)*3+r.yy],r.c[(r.xx)*3+r.yy]);
			++r.xx;
			r.Evaluate();
			if(m[r.Hash()]==0)	q.push(r),m[r.Hash()]=1;  
		}
		if(t.yy+1<=3)//right
		{
			r=t;
			r.ans+='r';
			swap(r.c[(r.xx-1)*3+r.yy],r.c[(r.xx-1)*3+r.yy+1]);
			++r.yy;
			r.Evaluate();
			if(m[r.Hash()]==0)	q.push(r),m[r.Hash()]=1; 
		}//*/
	}
}
int main()
{
	char c;
	U(i,1,9)
	{
		cin>>c;
		if(c!='x')
		{
			s.c[i]=c-'0';
		}
		else	
		{
			s.c[i]=9;
			s.xx=(i-1)/3+1;
			s.yy=i-3*(s.xx-1);
		}
	}
	if(s.Hash()==0)
	{
		return 0;
	}
	s.ans="";
	m[s.Hash()]=1;
	Astar(s);
	printf("unsolvable\n");
	return 0;
}
