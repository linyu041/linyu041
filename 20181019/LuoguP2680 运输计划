#include<bits/stdc++.h>
using namespace std;
#define U(i,j,k) for(int i=j;i<=k;++i)
#define D(i,j,k) for(int i=j;i>=k;--i)
const int N=300005,M=600005;
int f[N],n,q,go[23][N],dep[N],dep_len[N];
struct Data
{
	int u,v,len,lca;
}a[N];
int tot,la[N],v[M],w[M],nxt[M];
inline void AddE(int x,int y,int z)
{
	v[++tot]=y;w[tot]=z;nxt[tot]=la[x];la[x]=tot;
}
void DDFS(int x,int y)
{
	go[0][x]=y;dep[x]=dep[y]+1;
	for(int i=1;i<=20;++i)	go[i][x]=go[i-1][go[i-1][x]];
	for(int i=la[x];i;i=nxt[i])
	{
		if(v[i]==y)	continue;
		dep_len[v[i]]=dep_len[x]+w[i];
		DDFS(v[i],x);
	}
}
int LCA(int x,int y)
{
	if(dep[x]>dep[y])	swap(x,y);
	for(int i=20;i>=0;--i)
	{
		if(dep[go[i][y]]>=dep[x])	y=go[i][y];
	}
	if(x==y)	return x;
	for(int i=20;i>=0;--i)
	{
		if(go[i][x]!=go[i][y])	
		{
			x=go[i][x];y=go[i][y];
		}
	}
	return go[0][x];
}
int tag,cnt,limt;
void DDFS2(int x,int y,int z)
{
	if(tag)	return;
	for(int i=la[x];i;i=nxt[i])
	{
		if(v[i]==y)	continue;
		DDFS2(v[i],x,w[i]);
		f[x]+=f[v[i]];
	}
	if(f[x]==cnt&&a[1].len-z<=limt)	tag=1;
}
int Check(int x)
{
	memset(f,0,sizeof(f));
	tag=cnt=0;
	limt=x;
	for(int i=1;i<=q;++i)
	{
		if(a[i].len>x)
		{
			++cnt;
			++f[a[i].u];++f[a[i].v];
			f[a[i].lca]-=2;
		}
		else	break;
	}
	if(cnt==0)	return 1;
	DDFS2(1,0,0);
	return tag;
}
int cmp(Data x,Data y)
{
	return x.len>y.len;
}
int main()
{
	scanf("%d%d",&n,&q);
	int x,y,z,l=0,r=0;
	for(int i=1;i<n;++i)
	{
		scanf("%d%d%d",&x,&y,&z);
		AddE(x,y,z);AddE(y,x,z);
		r+=z;
	}
	DDFS(1,0);
	for(int i=1;i<=q;++i)
	{
		scanf("%d%d",&a[i].u,&a[i].v);
		z=LCA(a[i].u,a[i].v);
		a[i].lca=z;
		a[i].len=dep_len[a[i].u]+dep_len[a[i].v]-dep_len[z]-dep_len[z];
	}
	sort(a+1,a+1+q,cmp);
	int ans=0;
	while(l<=r)
	{
		int mid=(l+r)>>1;
		if(Check(mid))
		{
			r=mid-1;
			ans=mid;
		}
		else	l=mid+1;
	}
	printf("%d\n",ans);
	return 0;
}
