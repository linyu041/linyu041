#include<bits/stdc++.h>
using namespace std;
#define D(i,j,k) for(register int i=j;i>=k;--i)
#define U(i,j,k) for(register int i=j;i<=k;++i)
const int N=(1<<9)+1;
int a[11][11],Block[11][11],C[11][11],nxt[11];
int lie[11],hang[11],sqr[10],lo[N];
long long ans=-1;
int Cir(int x,int y)
{
    if(x==1||x==9||y==1||y==9)	return 6;
    if(x==2||x==8||y==2||y==8)	return 7;
    if(x==3||x==7||y==3||y==7)	return 8;
    if(x==4||x==6||y==4||y==6)	return 9;
    return 10;
}
long long Last(int x,int y)
{
    long long sum=0;
    D(i,y,1)	 
    {
        sum+=a[x][i]*C[x][i];
    }
    if(nxt[x]>9||!nxt[x])	return sum;
    for(int i=nxt[x];i<=9;i=nxt[i])
    {
        U(j,1,9)
        {
            sum+=(long long)a[i][j]*C[i][j];
        }
    }
    return sum;
}
void DDFS(int x,int y,long long sum,int tot_empty,int sumk)
{
    if(sum+9*sumk+9*C[x][y]<=ans)	return;
    if(!tot_empty||x>9)
    {
        ans=max(ans,sum+Last(x,y));
        return;
    }
    if(a[x][y])
    {
        if(y-2>=0)	DDFS(x,y-1,sum+a[x][y]*C[x][y],tot_empty,sumk);
        else		DDFS(nxt[x],9,sum+a[x][y]*C[x][y],tot_empty,sumk);
        return;
    }
    int t=(lie[y]&hang[x])&sqr[Block[x][y]];
	while(t>0)
	{
		int kk=t&(-t),k=lo[kk];
		lie[y]^=kk;hang[x]^=kk;sqr[Block[x][y]]^=kk;
        if(y-2>=0)	DDFS(x,y-1,sum+k*C[x][y],tot_empty,sumk-C[x][y]);
        else		DDFS(nxt[x],9,sum+k*C[x][y],tot_empty,sumk-C[x][y]);
        lie[y]^=kk;hang[x]^=kk;sqr[Block[x][y]]^=kk;
		t-=kk;
	}
}
int tims[11],b[11];
int cmp(int x,int y)
{
    return tims[x]<tims[y];
}
int main()
{
    int tot_empty=0,sumk=0,tst=0;
    U(i,1,9)	tst+=(1<<i),lo[(1<<i)]=i;
    U(i,1,9)	U(j,1,9)	Block[i][j]=(((i-1)/3)*3+((j-1)/3)+1),hang[i]=lie[j]=sqr[Block[i][j]]=tst;
    U(i,1,9)
    {
        b[i]=i;
        U(j,1,9)
        {
            C[i][j]=Cir(i,j);
            scanf("%d",&a[i][j]);
            if(!a[i][j])	++tot_empty,sumk+=C[i][j],++tims[i];
            else
            {
                lie[j]^=(1<<a[i][j]);
                hang[i]^=(1<<a[i][j]);
                sqr[Block[i][j]]^=(1<<a[i][j]);
			}
        }
    }
    sort(b+1,b+10,cmp);
    nxt[b[9]]=10;
    U(i,1,8)
    {
        nxt[b[i]]=b[i+1];
    }
    DDFS(b[1],9,0,tot_empty,sumk);
    printf("%lld\n",ans);
    return 0;
}
